    <?php
/**
 * Created by PhpStorm.
 * User: jorge
 * Date: 9/11/17
 * Time: 20:54
 */

use PHPUnit\Framework\TestCase;
use AppBundle\Handler\IssueHandler;
use AppBundle\Manager\IssueManager;
use JiraRestApi\Issue\IssueService;
use JiraRestApi\Issue\IssueSearchResult;

class IssueHandlerTest extends TestCase
{
    const JQL_ALL = 'project = MTC order by key ASC';
    const JQL_ISSUES = 'project = MTC AND issuetype in (Bug, Story, Task) ORDER BY key ASC';
    const JQL_SUBTASKS = 'project = MTC AND issuetype = Sub-task order by key ASC';

    private $issueManager;
    private $issueService;
    private $issueResult;
    private $startAt;
    private $maxResult;

    public function setUp()
    {
        $this->issueManager = $this->createMock(IssueManager::class);
        $this->issueService = $this->createMock(IssueService::class);
        $this->issueResult = new IssueSearchResult();
        $this->issueResult->total = 100;
        $this->issueResult->issues = [];
        $this->startAt = 0;
        $this->maxResult = 100;

        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testGetIssues(){
        $jql = self::JQL_ALL;

        $this->issueService->expects($this->exactly(1))
            ->method('search')
            ->with($jql, $this->startAt, $this->maxResult)
            ->willReturn($this->issueResult);

        $issueHandler = new IssueHandler($this->issueManager, $this->issueService);
        $issueHandler->getIssues($jql);
    }

    public function testSaveIssues(){
        $this->issueManager->expects($this->once())
            ->method('save')
            ->with([]);

        $jql = self::JQL_ISSUES;

        $this->issueService->expects($this->exactly(1))
            ->method('search')
            ->with($jql, $this->startAt, $this->maxResult)
            ->willReturn($this->issueResult);

        $issueHandler = new IssueHandler($this->issueManager, $this->issueService);
        $issueHandler->saveIssues();
    }

    public function testSaveSubTasks(){
        $this->issueManager->expects($this->once())
            ->method('save')
            ->with([]);

        $jql = self::JQL_SUBTASKS;

        $this->issueService->expects($this->exactly(1))
            ->method('search')
            ->with($jql, $this->startAt, $this->maxResult)
            ->willReturn($this->issueResult);

        $issueHandler = new IssueHandler($this->issueManager, $this->issueService);
        $issueHandler->saveSubTasks();
    }
}