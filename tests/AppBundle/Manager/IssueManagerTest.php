<?php
/**
 * Created by PhpStorm.
 * User: jorge
 * Date: 10/11/17
 * Time: 17:30
 */

use PHPUnit\Framework\TestCase;
use Doctrine\ORM\EntityManager;
use AppBundle\Manager\IssueManager;
use AppBundle\Manager\IssueTypeManager;
use AppBundle\Manager\ComponentManager;
use AppBundle\Manager\VersionManager;
use AppBundle\Repository\IssueRepository;

class IssueManagerTest extends TestCase
{
    private $em;
    private $issueTypeManager;
    private $componentManager;
    private $versionManager;
    private $repository;
    private $paginator;
    
    public function setUp()
    {
        $this->em = $this->createMock(EntityManager::class);
        $this->issueTypeManager = $this->createMock(IssueTypeManager::class);
        $this->componentManager = $this->createMock(ComponentManager::class);
        $this->versionManager = $this->createMock(VersionManager::class);
        $this->repository = $this->getMockBuilder(IssueRepository::class)
            ->disableOriginalConstructor()
            ->getMock();
        $this->paginator = $this->createMock(\AppBundle\Tools\Paginator::class);
        
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testSaveIssue(){
        $this->em->expects($this->exactly(2))
            ->method('persist');

        $this->em->expects($this->once())
            ->method('flush');

        $this->issueTypeManager->expects($this->exactly(2))
            ->method('findAll')
            ->willReturn([]);

        $this->componentManager->expects($this->exactly(2))
            ->method('findAll')
            ->willReturn([]);

        $this->versionManager->expects($this->exactly(2))
            ->method('findAll')
            ->willReturn([]);

        $issueManager = new IssueManager($this->em, $this->issueTypeManager, $this->componentManager, $this->versionManager, $this->paginator);

        $issues = array(
            'i1' => (object) array(
                'id' => '1',
                'key' => 'K1',
                'fields' => (object) array(
                    'id' => '1',
                    'summary' => 'Summary1',
                    'timespent' => '1',
                    'status' => (object) array(
                        'id' => '1',
                        'name' => 'To do'
                    ),
                    'components' => array(
                        'id' => '1',
                        'name' => 'Component'
                    ),
                    'fixVersions' => array(
                        'id' => '1',
                        'name' => 'Version'
                    ),
                    'parent' => null
                )
            ),
            'i2' => (object) array(
                'id' => '2',
                'key' => 'K2',
                'fields' => (object) array(
                    'id' => '2',
                    'summary' => 'Symmary2',
                    'timespent' => '2',
                    'status' => (object) array(
                        'name' => 'To do'
                    ),
                    'components' => array(
                        'id' => '2',
                        'name' => 'Component'
                    ),
                    'fixVersions' => array(
                        'id' => '1',
                        'name' => 'Version'
                    ),
                    'parent' => null
                )
            )
        );

        $issueManager->save($issues);
    }

    public function testFindAll(){
        $this->repository->expects($this->once())
            ->method('findAll');

        $this->em->expects($this->once())
            ->method('getRepository')
            ->with('AppBundle\Entity\Issue')
            ->willReturn($this->repository);

        $issueManager = new IssueManager($this->em, $this->issueTypeManager, $this->componentManager, $this->versionManager, $this->paginator);

        $issueManager->findAll();
    }

    public function testFindOneByCode(){
        $id = 1;

        $this->repository->expects($this->once())
            ->method('findOneBy')
            ->with(['code' => $id]);

        $this->em->expects($this->once())
            ->method('getRepository')
            ->with('AppBundle\Entity\Issue')
            ->willReturn($this->repository);

        $issueManager = new IssueManager($this->em, $this->issueTypeManager, $this->componentManager, $this->versionManager, $this->paginator);

        $issueManager->findOneByCode($id);
    }

    public function testFindOneByJiraId(){
        $id = 1;

        $this->repository->expects($this->once())
            ->method('findOneBy')
            ->with(['jiraId' => $id]);

        $this->em->expects($this->once())
            ->method('getRepository')
            ->with('AppBundle\Entity\Issue')
            ->willReturn($this->repository);

        $issueManager = new IssueManager($this->em, $this->issueTypeManager, $this->componentManager, $this->versionManager, $this->paginator);

        $issueManager->findOneByJiraId($id);
    }
    
    public function testGetCostDetailOfVersion(){
        $id = 1;

        $this->repository->expects($this->once())
            ->method('getCostDetailOfVersion')
            ->with($id);

        $this->em->expects($this->once())
            ->method('getRepository')
            ->with('AppBundle\Entity\Issue')
            ->willReturn($this->repository);

        $issueManager = new IssueManager($this->em, $this->issueTypeManager, $this->componentManager, $this->versionManager, $this->paginator);

        $issueManager->getCostDetailOfVersion($id);
    }
}